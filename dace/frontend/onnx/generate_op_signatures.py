import onnx
import warnings
import re
import yaml
import os
from dace.frontend.onnx.onnx_frontend import AttributeProtoConverter

ONNX_DTYPES_TO_NUMPY_STR = {
    'bool': 'bool',
    'int8': 'int8',
    'int16': 'int16',
    'int32': 'int32',
    'int64': 'int64',
    'uint8': 'uint8',
    'uint16': 'uint16',
    'uint32': 'uint32',
    'uint64': 'uint64',
    'float16': 'float16',
    'float': 'float32',
    'double': 'float64',
    'complex64': 'complex64',
    'complex128': 'complex128',
}


def extract_typename(type_str, op_name):
    results = re.findall(r"^tensor\((.+)\)", type_str)
    if len(results) != 1 or results[0] not in ONNX_DTYPES_TO_NUMPY_STR:
        warnings.warn("Unable to parse type_str {} for {}".format(type_str, op_name))
        return None
    return ONNX_DTYPES_TO_NUMPY_STR[str(results[0])]


def schema_to_dict(schema):
    inputs = [[str(inp.name), str(inp.typeStr)] for inp in schema.inputs]
    outputs = [[str(outp.name), str(outp.typeStr)] for outp in schema.outputs]
    required = int(schema.min_input)
    types = {
        str(cons.type_param_str): [
            extract_typename(type_str, schema.name) for type_str in cons.allowed_type_strs
            if extract_typename(type_str, schema.name) is not None
        ]
        for cons in schema.type_constraints
    }

    conv = AttributeProtoConverter()
    required_attributes = {
        str(name): conv.get_type_str(proto.type)
        for name, proto in schema.attributes.items() if not proto.default_value.name
    }
    attributes = {
        str(name): conv(proto.default_value)
        for name, proto in schema.attributes.items() if proto.default_value.name
    }

    return {
        "inputs": inputs,
        "outputs": outputs,
        "required_attributes": required_attributes,
        "attributes": attributes,
        "required": required,
        "types": types,
    }


def main():
    all_schemas = {
        str(schema.name): schema_to_dict(schema)
        for schema in onnx.defs.get_all_schemas()
        if not any([  # ignore ops that only take unsupported types
            len(types) == 0
            for types in schema_to_dict(schema)["types"].values()
        ])
    }
    path = ["dace", "frontend", "onnx", "op_signatures.yaml"]
    path_str = os.path.join(*path)

    print("Writing signatures to {}".format(path_str))
    f = open(path_str, "w")
    f.write("# THIS FILE WAS GENERATED BY generate_op_signatures.py\n")
    yaml.dump(all_schemas, f, default_flow_style=None)


if __name__ == "__main__":
    main()
